#!/usr/bin/env node
const debug = require('debug')
const logger = debug('src:www')
const http = require('http')
const fs = require('fs')
const path = require('path')
const config = require('config')
const SocketManager = require('../sockets/SocketManager')
const AlertManager = require('../alerts/AlertManager')
const PersistenceManager = require('../data/PersistenceManager')
const PollingClient = require('../grill/PollingClient')
const SocketSender = require('../alerts/senders/SocketSender')
const SlackSender = require('../alerts/senders/SlackSender')
const slackConfig = config.get('alerts.slack')
const appFactory = require('../app')
const clientFactory = require('../grill')
const client = clientFactory.initialize({ logger: debug('src:gmg-client') })
const dbFactory = require('../data')

dbFactory.initialize({ logger: debug('src:db-factory') })

/**
 * Ensure we can discover and connect to the grill
 */
client.discoverGrill().then(() => startServices()).catch((err) => {
  logger(err)
  startServices()
})

function startServices() {
  /**
 * Get port from environment and store in Express.
 */
  const app = appFactory.create()
  const port = normalizePort(process.env.PORT || '3001')
  app.set('port', port)

  /**
   * Create HTTP server.
   */
  const webServer = http.Server(app)
  webServer.listen(port)
  webServer.on('error', err => onError(port, err))
  webServer.on('listening', () => onListening(webServer))

  /**
   * Create PollingClient
   */
  const pollingClient = new PollingClient({
    client,
    logger: debug('src:PollingClient')
  })

  /**
   * Create Socket Server
   */
  const socketManager = new SocketManager({
    pollingClient,
    server: webServer,
    logger: debug('src:SocketManager')
  })

  /**
   * Create Alert Manager
   */
  const alertManager = new AlertManager({
    pollingClient,
    handlers: getAlertHandlers(),
    senders: [
      new SocketSender(socketManager),
      new SlackSender(slackConfig)
    ],
    logger: debug('src:AlertManager')
  })

  const persistenceManager = new PersistenceManager({
    pollingClient,
    logger: debug('src:PersistenceManager')
  })

  // Start all
  socketManager.start()
  alertManager.start()
  persistenceManager.start()
  pollingClient.start()
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(port, error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(webServer) {
  const addr = webServer.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  logger('Listening on ' + bind)
}

/**
 * Scan's the alert directory for all available alert handlers
 */
function getAlertHandlers() {
  const handlerPath = path.resolve(__dirname, '../alerts/handlers')
  return fs.readdirSync(handlerPath)
    .filter(file => path.basename(file) !== 'index.js')
    .filter(file => !file.endsWith('.disabled'))
    .map(file => require(path.resolve(handlerPath, file)))
}